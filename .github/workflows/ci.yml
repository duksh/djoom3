name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

  sonarqube:
    runs-on: ubuntu-latest
    needs: setup

    services:
      sonarqube:
        image: sonarqube:latest
        ports:
          - 9000:9000
        options: >-
          --health-cmd="curl -s http://localhost:9000/api/system/health | grep -q UP"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10
          --memory=2g

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install SonarQube scanner
        run: |
          curl -L -o sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
          unzip sonar-scanner.zip
          sudo mv sonar-scanner-4.7.0.2747-linux /opt/sonar-scanner
          sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

      - name: Wait for SonarQube to be ready
        run: |
          echo "Waiting for SonarQube to be ready..."
          until curl -s http://localhost:9000/api/system/health | grep -q UP; do
            sleep 10
          done

      - name: Check SonarQube logs
        run: docker logs $(docker ps -q --filter ancestor=sonarqube:latest)

      - name: Run SonarQube Scanner
        run: |
          sonar-scanner \
            -Dsonar.projectKey=your_project_key \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://localhost:9000 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: setup

    services:
      docker:
        image: docker:19.03.12
        options: --privileged
        ports:
          - 80:80
          - 3306:3306

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Compose
        run: |
          docker-compose up -d

  joomla:
    runs-on: ubuntu-latest
    needs: [setup, docker]

    strategy:
      matrix:
        php-version: [8.0]
        mysql-version: [5.7, 8.0]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up PHP and Apache2
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:ondrej/php
          sudo apt-get update
          sudo apt-get install -y php${{ matrix.php-version }} libapache2-mod-php php${{ matrix.php-version }}-mysql
          sudo systemctl start apache2

      - name: Set up Database Server
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server-${{ matrix.mysql-version }}
          sudo systemctl start mysql
          sudo mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root_password';"
          sudo mysql -u root -proot_password -e "CREATE USER 'joomla'@'localhost' IDENTIFIED BY 'joomla_password';"
          sudo mysql -u root -proot_password -e "GRANT ALL PRIVILEGES ON *.* TO 'joomla'@'localhost';"
          sudo mysql -u root -proot_password -e "FLUSH PRIVILEGES;"
          sudo mysql -u root -proot_password -e "CREATE DATABASE joomla;"

      - name: Cache Docker images
        uses: actions/cache@v2
        with:
          path: /var/lib/docker
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-